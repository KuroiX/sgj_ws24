//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/FindMemo/SpinMove/SpinAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpinAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpinAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpinAction"",
    ""maps"": [
        {
            ""name"": ""SpinnerKeyboard"",
            ""id"": ""b9c36f82-a36a-4281-add2-1d36b03da311"",
            ""actions"": [
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""839598d1-98de-4d92-b1e1-b0291dbfddee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70ab17ce-58b6-4d83-add4-5e93f51a125a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea1ef428-f359-4073-879d-2868ded1c9b1"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Spin"",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a69bc1be-e330-4f36-92d5-25de3dabd78e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpinnerGamepad"",
            ""id"": ""bd0785d6-2357-4f1a-8524-9acafcb24669"",
            ""actions"": [
                {
                    ""name"": ""Spin"",
                    ""type"": ""Value"",
                    ""id"": ""ef8792c9-81ad-4f9e-a5cb-90b470cd3677"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2d64d24-021c-480c-a9de-0ceea5b959b4"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Spin;Gamepad"",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e212bc8-fdba-47ab-ac7c-0f2658dabd02"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Spin;Gamepad"",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Spin"",
            ""bindingGroup"": ""Spin"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SpinnerKeyboard
        m_SpinnerKeyboard = asset.FindActionMap("SpinnerKeyboard", throwIfNotFound: true);
        m_SpinnerKeyboard_Spin = m_SpinnerKeyboard.FindAction("Spin", throwIfNotFound: true);
        // SpinnerGamepad
        m_SpinnerGamepad = asset.FindActionMap("SpinnerGamepad", throwIfNotFound: true);
        m_SpinnerGamepad_Spin = m_SpinnerGamepad.FindAction("Spin", throwIfNotFound: true);
    }

    ~@SpinAction()
    {
        UnityEngine.Debug.Assert(!m_SpinnerKeyboard.enabled, "This will cause a leak and performance issues, SpinAction.SpinnerKeyboard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SpinnerGamepad.enabled, "This will cause a leak and performance issues, SpinAction.SpinnerGamepad.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpinnerKeyboard
    private readonly InputActionMap m_SpinnerKeyboard;
    private List<ISpinnerKeyboardActions> m_SpinnerKeyboardActionsCallbackInterfaces = new List<ISpinnerKeyboardActions>();
    private readonly InputAction m_SpinnerKeyboard_Spin;
    public struct SpinnerKeyboardActions
    {
        private @SpinAction m_Wrapper;
        public SpinnerKeyboardActions(@SpinAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spin => m_Wrapper.m_SpinnerKeyboard_Spin;
        public InputActionMap Get() { return m_Wrapper.m_SpinnerKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpinnerKeyboardActions set) { return set.Get(); }
        public void AddCallbacks(ISpinnerKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_SpinnerKeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpinnerKeyboardActionsCallbackInterfaces.Add(instance);
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
        }

        private void UnregisterCallbacks(ISpinnerKeyboardActions instance)
        {
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
        }

        public void RemoveCallbacks(ISpinnerKeyboardActions instance)
        {
            if (m_Wrapper.m_SpinnerKeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpinnerKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_SpinnerKeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpinnerKeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpinnerKeyboardActions @SpinnerKeyboard => new SpinnerKeyboardActions(this);

    // SpinnerGamepad
    private readonly InputActionMap m_SpinnerGamepad;
    private List<ISpinnerGamepadActions> m_SpinnerGamepadActionsCallbackInterfaces = new List<ISpinnerGamepadActions>();
    private readonly InputAction m_SpinnerGamepad_Spin;
    public struct SpinnerGamepadActions
    {
        private @SpinAction m_Wrapper;
        public SpinnerGamepadActions(@SpinAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spin => m_Wrapper.m_SpinnerGamepad_Spin;
        public InputActionMap Get() { return m_Wrapper.m_SpinnerGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpinnerGamepadActions set) { return set.Get(); }
        public void AddCallbacks(ISpinnerGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_SpinnerGamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpinnerGamepadActionsCallbackInterfaces.Add(instance);
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
        }

        private void UnregisterCallbacks(ISpinnerGamepadActions instance)
        {
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
        }

        public void RemoveCallbacks(ISpinnerGamepadActions instance)
        {
            if (m_Wrapper.m_SpinnerGamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpinnerGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_SpinnerGamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpinnerGamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpinnerGamepadActions @SpinnerGamepad => new SpinnerGamepadActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    private int m_SpinSchemeIndex = -1;
    public InputControlScheme SpinScheme
    {
        get
        {
            if (m_SpinSchemeIndex == -1) m_SpinSchemeIndex = asset.FindControlSchemeIndex("Spin");
            return asset.controlSchemes[m_SpinSchemeIndex];
        }
    }
    public interface ISpinnerKeyboardActions
    {
        void OnSpin(InputAction.CallbackContext context);
    }
    public interface ISpinnerGamepadActions
    {
        void OnSpin(InputAction.CallbackContext context);
    }
}
